<?php
/**
 * MyCitySelector
 * @author  Konstantin Kutsevalov
 * @version 2.0.0
 */

defined('_JEXEC') or die(header('HTTP/1.0 403 Forbidden') . 'Restricted access');

use joomx\mcs\plugin\helpers\McsData;

class MycityselectorModelProvinces extends Joomla\CMS\MVC\Model\ListModel
{

	/**
	 * Table name
	 * @var string
	 */
	private $table = '#__mycityselector_provinces';
    private $tableNames = '#__mycityselector_province_names';
    private $tableCountries = '#__mycityselector_countries';
    private $tableCountryNames = '#__mycityselector_country_names';


	/**
	 * For Input object link
	 * @var null
	 */
	private $input = null;

	public $_forms;

	/**
	 * Init
	 */
	function __construct($config = [])
	{
		if (empty($config['filter_fields']))
		{
			$config['filter_fields'] = ['ordering', 'id', 'name', 'subdomain', 'published', 'country'];
		}
		parent::__construct($config);
		$this->input = Joomla\CMS\Factory::getApplication()->input;
	}


	/**
	 * @return JDatabaseQuery
	 */
	protected function getListQuery()
	{
        $langId = McsData::getLangId();

		$db    = $this->getDbo();
		$query = $this->_db->getQuery(true);
		$query->select('a.id as id, c.name as name, a.subdomain as subdomain, a.published as published, a.ordering as ordering, n.name as country')
			->from($this->table . ' as a')
            ->innerJoin("`{$this->tableNames}` AS `c` ON `a`.`id` = `c`.`province_id`")
            ->where("`c`.`lang_id` = {$langId}");

		// Filter by search in title or note or id:.
		$search = $this->getState('filter.search');
		if (!empty($search))
		{
			if (stripos($search, 'id:') === 0)
			{
				$query->where($db->quoteName('id') . ' = ' . (int) substr($search, 3));
			}
			else
			{
				$search = $db->quote('%' . strtolower($search) . '%');
				$query->where('(LOWER(c.name) LIKE ' . $search . ')');
			}
		}
		// Filter by country
		$country = $this->getState('filter.country');
		if (!empty($country))
		{
			$query->where('a.country_id = ' . $db->escape($country));
		}
		$query->innerJoin("{$this->tableCountries} as b ON a.country_id = b.id")
              ->innerJoin("`{$this->tableCountryNames}` AS `n` ON `n`.`id` = `a`.`country_id`")
              ->where("`n`.`lang_id` = {$langId}");

		$query->order($db->qn($db->escape($this->getState('list.ordering', 'name'))) . ' ' . $db->escape($this->getState('list.direction', 'ASC')));
		return $query;
	}


	protected function populateState($ordering = 'ordering', $direction = 'ASC')
	{
		parent::populateState($ordering, $direction); // TODO: Change the autogenerated stub
	}

}